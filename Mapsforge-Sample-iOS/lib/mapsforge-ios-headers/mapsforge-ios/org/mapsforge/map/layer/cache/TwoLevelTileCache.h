//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/TwoLevelTileCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMapsforgeMapLayerCacheTwoLevelTileCache")
#ifdef RESTRICT_OrgMapsforgeMapLayerCacheTwoLevelTileCache
#define INCLUDE_ALL_OrgMapsforgeMapLayerCacheTwoLevelTileCache 0
#else
#define INCLUDE_ALL_OrgMapsforgeMapLayerCacheTwoLevelTileCache 1
#endif
#undef RESTRICT_OrgMapsforgeMapLayerCacheTwoLevelTileCache

#if !defined (OrgMapsforgeMapLayerCacheTwoLevelTileCache_) && (INCLUDE_ALL_OrgMapsforgeMapLayerCacheTwoLevelTileCache || defined(INCLUDE_OrgMapsforgeMapLayerCacheTwoLevelTileCache))
#define OrgMapsforgeMapLayerCacheTwoLevelTileCache_

#define RESTRICT_OrgMapsforgeMapLayerCacheTileCache 1
#define INCLUDE_OrgMapsforgeMapLayerCacheTileCache 1
#include "org/mapsforge/map/layer/cache/TileCache.h"

@class OrgMapsforgeMapLayerQueueJob;
@protocol JavaUtilSet;
@protocol OrgMapsforgeCoreGraphicsTileBitmap;

@interface OrgMapsforgeMapLayerCacheTwoLevelTileCache : NSObject < OrgMapsforgeMapLayerCacheTileCache >

#pragma mark Public

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)firstLevelTileCache
                    withOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)secondLevelTileCache;

- (jboolean)containsKeyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (void)destroy;

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (jint)getCapacity;

- (jint)getCapacityFirstLevel;

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getImmediatelyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (void)purge;

- (void)putWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
     withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap;

- (void)setWorkingSetWithJavaUtilSet:(id<JavaUtilSet>)newWorkingSet;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMapsforgeMapLayerCacheTwoLevelTileCache)

FOUNDATION_EXPORT void OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(OrgMapsforgeMapLayerCacheTwoLevelTileCache *self, id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache, id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache);

FOUNDATION_EXPORT OrgMapsforgeMapLayerCacheTwoLevelTileCache *new_OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache, id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMapsforgeMapLayerCacheTwoLevelTileCache *create_OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache, id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache);

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapLayerCacheTwoLevelTileCache)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMapsforgeMapLayerCacheTwoLevelTileCache")
