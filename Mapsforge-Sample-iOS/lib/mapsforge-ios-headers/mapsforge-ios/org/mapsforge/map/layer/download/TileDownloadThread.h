//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/TileDownloadThread.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMapsforgeMapLayerDownloadTileDownloadThread")
#ifdef RESTRICT_OrgMapsforgeMapLayerDownloadTileDownloadThread
#define INCLUDE_ALL_OrgMapsforgeMapLayerDownloadTileDownloadThread 0
#else
#define INCLUDE_ALL_OrgMapsforgeMapLayerDownloadTileDownloadThread 1
#endif
#undef RESTRICT_OrgMapsforgeMapLayerDownloadTileDownloadThread

#if !defined (OrgMapsforgeMapLayerDownloadTileDownloadThread_) && (INCLUDE_ALL_OrgMapsforgeMapLayerDownloadTileDownloadThread || defined(INCLUDE_OrgMapsforgeMapLayerDownloadTileDownloadThread))
#define OrgMapsforgeMapLayerDownloadTileDownloadThread_

#define RESTRICT_OrgMapsforgeMapUtilPausableThread 1
#define INCLUDE_OrgMapsforgeMapUtilPausableThread 1
#include "org/mapsforge/map/util/PausableThread.h"

@class OrgMapsforgeMapLayerLayer;
@class OrgMapsforgeMapLayerQueueJobQueue;
@class OrgMapsforgeMapModelDisplayModel;
@class OrgMapsforgeMapUtilPausableThread_ThreadPriority;
@protocol OrgMapsforgeCoreGraphicsGraphicFactory;
@protocol OrgMapsforgeMapLayerCacheTileCache;

@interface OrgMapsforgeMapLayerDownloadTileDownloadThread : OrgMapsforgeMapUtilPausableThread

#pragma mark Public

- (void)setJobQueueWithOrgMapsforgeMapLayerQueueJobQueue:(OrgMapsforgeMapLayerQueueJobQueue *)jobQueue;

#pragma mark Protected

- (void)doWork;

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority;

- (jboolean)hasWork;

#pragma mark Package-Private

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                     withOrgMapsforgeMapLayerQueueJobQueue:(OrgMapsforgeMapLayerQueueJobQueue *)jobQueue
                             withOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer
                withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                      withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel;

@end

J2OBJC_STATIC_INIT(OrgMapsforgeMapLayerDownloadTileDownloadThread)

FOUNDATION_EXPORT void OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapLayerDownloadTileDownloadThread *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerLayer *layer, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel);

FOUNDATION_EXPORT OrgMapsforgeMapLayerDownloadTileDownloadThread *new_OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerLayer *layer, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMapsforgeMapLayerDownloadTileDownloadThread *create_OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerLayer *layer, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel);

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapLayerDownloadTileDownloadThread)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMapsforgeMapLayerDownloadTileDownloadThread")
