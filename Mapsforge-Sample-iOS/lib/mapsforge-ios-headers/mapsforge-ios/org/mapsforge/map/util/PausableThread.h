//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/util/PausableThread.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMapsforgeMapUtilPausableThread")
#ifdef RESTRICT_OrgMapsforgeMapUtilPausableThread
#define INCLUDE_ALL_OrgMapsforgeMapUtilPausableThread 0
#else
#define INCLUDE_ALL_OrgMapsforgeMapUtilPausableThread 1
#endif
#undef RESTRICT_OrgMapsforgeMapUtilPausableThread

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMapsforgeMapUtilPausableThread_) && (INCLUDE_ALL_OrgMapsforgeMapUtilPausableThread || defined(INCLUDE_OrgMapsforgeMapUtilPausableThread))
#define OrgMapsforgeMapUtilPausableThread_

#define RESTRICT_JavaLangThread 1
#define INCLUDE_JavaLangThread 1
#include "java/lang/Thread.h"

@class OrgMapsforgeMapUtilPausableThread_ThreadPriority;

@interface OrgMapsforgeMapUtilPausableThread : JavaLangThread

#pragma mark Public

- (instancetype)init;

- (void)awaitPausing;

- (void)interrupt;

- (jboolean)isPausing;

- (void)pause;

- (void)proceed;

- (void)run;

#pragma mark Protected

- (void)afterRun;

- (void)doWork;

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority;

- (jboolean)hasWork;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMapsforgeMapUtilPausableThread)

FOUNDATION_EXPORT void OrgMapsforgeMapUtilPausableThread_init(OrgMapsforgeMapUtilPausableThread *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapUtilPausableThread)

#endif

#if !defined (OrgMapsforgeMapUtilPausableThread_ThreadPriority_) && (INCLUDE_ALL_OrgMapsforgeMapUtilPausableThread || defined(INCLUDE_OrgMapsforgeMapUtilPausableThread_ThreadPriority))
#define OrgMapsforgeMapUtilPausableThread_ThreadPriority_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgMapsforgeMapUtilPausableThread_ThreadPriority_Enum) {
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_Enum_ABOVE_NORMAL = 0,
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_Enum_BELOW_NORMAL = 1,
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_Enum_HIGHEST = 2,
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_Enum_LOWEST = 3,
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_Enum_NORMAL = 4,
};

@interface OrgMapsforgeMapUtilPausableThread_ThreadPriority : JavaLangEnum < NSCopying > {
 @public
  jint priority_;
}

#pragma mark Public

+ (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgMapsforgeMapUtilPausableThread_ThreadPriority)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_values_[];

inline OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_get_ABOVE_NORMAL();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapUtilPausableThread_ThreadPriority, ABOVE_NORMAL)

inline OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_get_BELOW_NORMAL();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapUtilPausableThread_ThreadPriority, BELOW_NORMAL)

inline OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_get_HIGHEST();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapUtilPausableThread_ThreadPriority, HIGHEST)

inline OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_get_LOWEST();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapUtilPausableThread_ThreadPriority, LOWEST)

inline OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_get_NORMAL();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapUtilPausableThread_ThreadPriority, NORMAL)

FOUNDATION_EXPORT IOSObjectArray *OrgMapsforgeMapUtilPausableThread_ThreadPriority_values();

FOUNDATION_EXPORT OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapUtilPausableThread_ThreadPriority)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgMapsforgeMapUtilPausableThread")
