//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ugos/j2objc-master/testing/mockito/build_result/java/org/mockito/Mock.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoMock")
#ifdef RESTRICT_OrgMockitoMock
#define INCLUDE_ALL_OrgMockitoMock 0
#else
#define INCLUDE_ALL_OrgMockitoMock 1
#endif
#undef RESTRICT_OrgMockitoMock

#if !defined (OrgMockitoMock_) && (INCLUDE_ALL_OrgMockitoMock || defined(INCLUDE_OrgMockitoMock))
#define OrgMockitoMock_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;
@class OrgMockitoAnswers;

@protocol OrgMockitoMock < JavaLangAnnotationAnnotation >

@property (readonly) OrgMockitoAnswers *answer;
@property (readonly) NSString *name;
@property (readonly) IOSObjectArray *extraInterfaces;

@end

@interface OrgMockitoMock : NSObject < OrgMockitoMock > {
 @public
  OrgMockitoAnswers *answer_;
  NSString *name_;
  IOSObjectArray *extraInterfaces_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoMock)

FOUNDATION_EXPORT id<OrgMockitoMock> create_OrgMockitoMock(OrgMockitoAnswers *answer, IOSObjectArray *extraInterfaces, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoMock)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMockitoMock")
