//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ugos/j2objc-master/testing/mockito/build_result/java/org/mockito/MockitoAnnotations.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoMockitoAnnotations")
#ifdef RESTRICT_OrgMockitoMockitoAnnotations
#define INCLUDE_ALL_OrgMockitoMockitoAnnotations 0
#else
#define INCLUDE_ALL_OrgMockitoMockitoAnnotations 1
#endif
#undef RESTRICT_OrgMockitoMockitoAnnotations

#if !defined (OrgMockitoMockitoAnnotations_) && (INCLUDE_ALL_OrgMockitoMockitoAnnotations || defined(INCLUDE_OrgMockitoMockitoAnnotations))
#define OrgMockitoMockitoAnnotations_

@class IOSClass;
@class JavaLangReflectField;
@protocol OrgMockitoConfigurationAnnotationEngine;

@interface OrgMockitoMockitoAnnotations : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)initMocksWithId:(id)testClass OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

+ (void)processAnnotationDeprecatedWayWithOrgMockitoConfigurationAnnotationEngine:(id<OrgMockitoConfigurationAnnotationEngine>)annotationEngine
                                                                           withId:(id)testClass
                                                         withJavaLangReflectField:(JavaLangReflectField *)field;

+ (void)scanDeprecatedWayWithOrgMockitoConfigurationAnnotationEngine:(id<OrgMockitoConfigurationAnnotationEngine>)annotationEngine
                                                              withId:(id)testClass
                                                        withIOSClass:(IOSClass *)clazz;

+ (void)throwIfAlreadyAssignedWithJavaLangReflectField:(JavaLangReflectField *)field
                                           withBoolean:(jboolean)alreadyAssigned;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoMockitoAnnotations)

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_init(OrgMockitoMockitoAnnotations *self);

FOUNDATION_EXPORT OrgMockitoMockitoAnnotations *new_OrgMockitoMockitoAnnotations_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoMockitoAnnotations *create_OrgMockitoMockitoAnnotations_init();

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_initMocksWithId_(id testClass);

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_scanDeprecatedWayWithOrgMockitoConfigurationAnnotationEngine_withId_withIOSClass_(id<OrgMockitoConfigurationAnnotationEngine> annotationEngine, id testClass, IOSClass *clazz);

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_processAnnotationDeprecatedWayWithOrgMockitoConfigurationAnnotationEngine_withId_withJavaLangReflectField_(id<OrgMockitoConfigurationAnnotationEngine> annotationEngine, id testClass, JavaLangReflectField *field);

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_throwIfAlreadyAssignedWithJavaLangReflectField_withBoolean_(JavaLangReflectField *field, jboolean alreadyAssigned);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoMockitoAnnotations)

#endif

#if !defined (OrgMockitoMockitoAnnotations_Mock_) && (INCLUDE_ALL_OrgMockitoMockitoAnnotations || defined(INCLUDE_OrgMockitoMockitoAnnotations_Mock))
#define OrgMockitoMockitoAnnotations_Mock_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol OrgMockitoMockitoAnnotations_Mock < JavaLangAnnotationAnnotation >

@end

@interface OrgMockitoMockitoAnnotations_Mock : NSObject < OrgMockitoMockitoAnnotations_Mock >

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoMockitoAnnotations_Mock)

FOUNDATION_EXPORT id<OrgMockitoMockitoAnnotations_Mock> create_OrgMockitoMockitoAnnotations_Mock();

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoMockitoAnnotations_Mock)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMockitoMockitoAnnotations")
